xv-minix2 FAQ
-------------

1. How do I compile it?
   Firstly, you need a 32-bit libgcc.a somewhere on your system. On Ubuntu,
   I've installed the libgcc-5-dev:i386 package. Now edit Makefile.common
   and set LIBGCC to the location of libgcc.a.

   Hopefully, on an x86 Linux or FreeBSD environment you can say 'make'. That's
   after you have done git clone https://github.com/DoctorWkt/xv6-freebsd

2. Why do I need libgcc.a?
   Some of the libraries need floats, so I am using -msoft-float with the
   compiler, and ld needs to be linked with libgcc.a.
   
   See in Makefile.common: LIBGCC=.. .

3. How do I run it?
   Make sure that you have qemu installed and the qemu-system-i386 binary
   exists. Then run 'make qemu' to build the kernel, libraries, commands,
   filesystem and launch qemu to boot the system.

4. Any documentation?
   The man pages are in fs/usr/share/man/man1, and when you boot xv6
   you can do "man ls", "man vi" etc. For some reason, nroff is very
   slow, so it's better to go into fs/usr/share/man/man1 and do
   nroff -man ls.1 | less

   Also read the NOTES and XV6_CHANGES files.

5. Structure of the source code?
   boot/    holds the bootstrap
   kern/    holds the xv6 kernel code. We want this as untouched as possible
   tools/   holds mkfs
   doc/     holds the scripts to convert the kernel code into printed format
   misc/    holds stuff from xv6 which doesn't belong anywhere in particular
   include/ holds the FreeBSD header files. Same structure as FreeBSD.
   lib/     holds the library source. There is an xv6/ directory with
  	    the xv6-specific code.
   cmd/     holds the commands. The old/ directory has the original xv6
	    programs. The simple/ directory holds one-file programs. The other
	    directories hold the code for multi-file programs.
   fs/      holds the basic filesystem structure. fs/bin gets populated
	    when you make and install the command binaries

6. What's with all the CFLAGS?
   I've kept most of the CFLAGS from the original xv6 Makefile; I'm not sure
   if we need all of them.

7. Do you specifically want FreeBSD 1.1.5.1 code?
   I'm not wedded to FreeBSD code. It is covered under a BSD license and the
   functions are reasonably small. I don't mind where code comes from as long
   as it's small and is covered by a BSD or MIT-compatible license. In fact,
   I've also used code from Minix 1.2 and 4.4BSD-LITE, plus some real Unix
   code (V7sh) which is now covered by a BSD license.

8. What things did you have to simulate to get the BSD libraries to work?
   The xv6 kernel is missing a heap of things like users, signals, file
   permissions, select(), fcntl() etc. In the lib/xv6 directory you will
   find the things that I either simulate (e.g. dup2() ), or stub functions
   that simply return a dummy value.

9. What next?
   I've got the BSD libraries up with only a few changes to the xv6 kernel,
   so it is still useful as a teaching OS but it now has a decent runtime.
   I should try to clean up the userland code to remove all the warnings
   that the compiler spits out.

last edit date: Sunday 31 July 2016
