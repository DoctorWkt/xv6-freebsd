Introduction
------------
xv is a minimalist Unix-like operating system, inspired by 6th Edition Unix
and the Lions Commentary on 6th Edition Unix. xv6's purpose is to teach
students about the workings of an operating system.
Website: https://pdos.csail.mit.edu/6.828/2014/xv6.html

xv is purposefully pared down from a real Unix-like system.
It only has these system calls:

chdir	close	dup	exec	exit	fork	fstat	getpid	kill
link	lseek	mkdir	mknod	open	pipe	read	sbrk	sleep
unlink	uptime	wait	write

Among the many things missing from xv6 are:
 - no users, every user is effectively root
 - no file permissions
 - no signals, job control, networking

Project Aim
-----------
The aim of this project is to give xv6 as much of a Unix library and run-time
environment as possible without altering the kernel source code. Examples:
 - add in ANSI C functions: strings, memory functions, malloc etc.
 - add in a Stdio library: fopen, fclose, printf etc.
 - regexps
 - simulate some syscalls calls with existing syscalls,
   or write dummy syscalls
 - port existing programs to provide a run-time environment

So far I (Warren Toomey) have taken much of the FreeBSD 1.1.5.1 header
files, library code and a few commands and made them compile on the system.

To Do
-----
In no particular order:

 - Modify the library code to correctly use the xv6 system calls

 - Write missing library functionality, e.g. opendir (DONE), more to do

 - Write dummy library functions

 - Compile more of the FreeBSD commands

 - Test everything to ensure that it works

 - DONE: Write a more functional mkfs so that a multi-level filesystem
   can be built, one that has /etc, /bin and friends

Thursday 28 July  16:35:51 AEST 2016 - Warren
---------------------------------------------
Well, I've moved on from the Minix libc/runtime and switched to
FreeBSD 1.1.5.1. It's been easier this time around, with a few
obstacles. We now have a reasonably full set of C libraries
and many of the simpler commands from FreeBSD. I've got levee
and less to run, as well as my wish shell.

Now I'm trying to find a suitable Bourne compatible shell and a
simple nroff.

Sunday 31 July  13:27:34 AEST 2016
----------------------------------
Things have moved quickly. I found a real V7-shell that Geoff Collyer
had modified to compile under current systems, and I got that working.
I had some trouble finding an nroff, so I went back to 4.4BSD-Lite
and found one there. While trying to get nroff to work I found a few
bugs in things like lseek(2) and fixed them. I wrote my own man(1)
command, and I've populated the system with suitable man pages.

Thus, with a decent shell, editor, pager and document processing tool,
I think the project is complete. I know I should go back and fix up
all the compiler warnings generated by the old code, but I may not
get around to that.

Friday 12 August  09:40:58 AEST 2016
------------------------------------
Yesterday I added separate /dev/console and /dev/serial devices. Now
we can have two concurrent users. I'm trying to add /dev/disk0 and
/dev/disk1. I've got reading on them working, but I've hit a bug.

  $ cat /dev/disk0           works and prints to the screen
  $ cat /dev/disk0 | wc -c   fails: No such file or directory

This behaviour happens to /dev/console as well, and even /console if
I move the device file up to root. But it doesn't happen in xv6-public,
so I've introduced a bug somewhere. I'll have to do some regression
testing.

It works at 4ea7a19d0b2b62e015ad082b55ad5648b92548b5 Sun Jul 24 11:55:24 2016
It FAILs at 18be6777f762ee2d4acb651e1de27df27afb9367 Tue Jul 26 10:04:05 2016

Actually, it seems to be a BSD thing.

  $ oldcat /dev/disk1 | oldwc
     18812  126847 10240000

  $ oldcat /dev/disk1 | wc
     18812  126847 10240000

BUT

  $ oldcat /dev/disk0 | wc -c
  (null): No such file or directory
       0

  $ cat /dev/disk1 | oldwc
  cat: /dev/disk1: No such file or directory
  0 0 0

The kernel didn't change between the two commits, so it must be something
that is being given to the syscalls that is changing.

Hmm, it's not device files:

  $ cat README | wc
  cat: README: No such file or directory

However, I've added cprintfs and I can see the open() operation working OK.
What I really need is syscall tracking (inputs & result).

And these also seem to work:
$ oldwc < /dev/disk1
$ wc < /dev/disk1
$ wc -c < /dev/disk1

Sunday 14 August  09:18:46 AEST 2016
------------------------------------
I found the bug. xv6 doesn't fstat() on pipe file descriptors, and I
can't find canonical documentation on what fstat() should do on a pipe.
So I've modified cat(1) and wc(1) to remove the fstat() code. Now things
work.
